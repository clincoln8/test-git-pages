{"version":3,"sources":["Header.js","server/GraphNode.js","server/Assertion.js","server/ParseMCF.js","server/ParseTMCF.js","server/ServerAPI.js","Home.js","AssertionTables.js","DisplayNode.js","App.js","serviceWorker.js","index.js"],"names":["Header","handleSearch","event","keyCode","window","location","hash","target","value","type","onKeyUp","this","placeholder","onClick","Component","API_ROOT","Node","dcid","alreadyFetched","curNode","getRemotePropertyLabels","then","allLabels","a","label","getRemotePropertyValues","valueList","valueObj","Assertion","createAssertionFromValueObj","console","log","createInvAssertionFromValueObj","createp","existing","nodeHash","newNode","obj","getLabelsRemoteTarget","fetch","res","json","data","JSON","parse","out","property","getValuesRemoteTarget","bothDirections","subjNodes","src","provenance","nextAssertion","assertions","Object","invNextAssertion","invAssertions","source","getNode","addAssertion","NAMESPACES","ParseMCF","sourceFileName","prov","line","trim","shouldReadLine","propLabel","getPropLabel","propValues","replace","getNodeFromPropValue","values","parsePropValues","forEach","file","fileReader","FileReader","readAsText","Promise","rej","addEventListener","result","parseMCFStr","name","mcf","fileName","lines","split","mcfParser","parseLine","startsWith","length","prop","splitLineOnColon","propValue","getDCIDFromPropValue","namespace","indexOf","push","csv","require","ParseTMCF","localID","undefined","tmcfStr","localIDToDCID","getEntityLocalID","includes","dataSetNameMatch","match","localIDMatch","index","lID","getArrowId","getDataSetName","template","csvRow","filledTemplate","parsedValues","parsedValue","colName","getDCIDFromEntity","join","csvRows","mcfStrList","row","fillTemplateFromRow","tmcfFile","loadLocalToDCID","csvFile","fromString","csvToMCF","readTMCFFile","readCSVFile","ServerAPI","tmcfCSVToMCF","mcfFile","readFile","isNode","Home","props","onSubmitMCF","home","readMCF","state","fileList","subjList","setSubjNodes","keys","onSubmitTMCF","endsWith","readTMCF","onClearPress","clearFiles","render","className","id","onChange","setState","files","accept","required","multiple","localDCIDList","map","key","getValueCell","isNodeObj","AssertionTable","asserts","assert","InvAssertionTable","invAsserts","DisplayNode","retrieveNode","fetchRemoteData","assertList","invAssertList","invAssert","App","nodes","href","curDCID","self","searchDCID","URLSearchParams","get","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d45cc640.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Header extends Component {\n  handleSearch = event =>{\n    if (event.keyCode === 13){\n      window.location.hash = '#dcid=' + event.target.value;\n    }\n  }\n  render(){\n    return(\n      <div>\n        <input type=\"search\" onKeyUp={this.handleSearch}\n         placeholder=\"Search for a dcid...\" />\n       <button onClick = {() => window.location.hash = '' }>Return Home</button>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","import Assertion from './Assertion.js'\n\nconst API_ROOT = 'https://api.datacommons.org';\n\n// JS representation of a single Node in the KG\nclass Node {\n  constructor (dcid) {\n    this.dcid = dcid;\n    this.alreadyFetched = false;\n  }\n\n  static getNode (dcid, createp) {\n    var existing = Node.nodeHash[dcid];\n    if (existing) {\n      return existing;\n    } else if (createp) {\n      var newNode = new Node(dcid);\n      Node.nodeHash[dcid] = newNode;\n      return newNode;\n    } else {\n      return null;\n    }\n  }\n\n  static isNode(obj){\n    return obj instanceof Node;\n  }\n\n  async fetchRemoteData(){\n    const curNode = this;\n    if (!curNode.alreadyFetched){\n\n      await getRemotePropertyLabels(curNode.dcid)\n      .then(async allLabels => {\n        // create Assertions for each triple current node is source\n        for(const label of allLabels['outLabels']) {\n          await getRemotePropertyValues(curNode.dcid, label, true)\n          .then( valueList => {\n            if(!valueList) {\n              console.log('ERROR: could not find value for node: '+ curNode.dcid +\n              ', label: ' + label);\n              return;\n            }\n            for(const valueObj of valueList) {\n              Assertion.createAssertionFromValueObj(curNode, label, valueObj);\n            }\n          });\n        }\n        // create Inverse Assertion for each triple current node is target\n        for (const label of allLabels['inLabels']) {\n          await getRemotePropertyValues(curNode.dcid, label, false)\n          .then( valueList => {\n            for( const valueObj of valueList) {\n            Assertion.createInvAssertionFromValueObj(curNode, label, valueObj);\n          }\n        })\n      }\n    });\n      curNode.alreadyFetched = true;\n    }\n  }\n}\n\nNode.nodeHash = {};\nNode.subjNodes = {};\n\nfunction getLabelsRemoteTarget(dcid){\n  let target = (API_ROOT + '/node/property-labels?dcids=' + dcid)\n  return target;\n}\n\nfunction getValuesRemoteTarget(dcid, property, out){\n  let target = (API_ROOT + '/node/property-values?dcids=' + dcid +\n  '&property=' +   property + '&direction=');\n  if (out){\n    target += 'out'\n  } else{\n    target += 'in'\n  }\n  target += '&limit=500';\n  return target;\n}\n\nfunction getRemotePropertyLabels(dcid){\n  const target = getLabelsRemoteTarget(dcid);\n  return fetch(target)\n  .then( res => res.json())\n  .then( data => JSON.parse(data['payload'])[dcid]);\n}\n\nfunction getRemotePropertyValues(dcid, label, out){\n  const target = getValuesRemoteTarget(dcid, label, out);\n  return fetch(target)\n  .then( res => res.json())\n  .then( data => JSON.parse(data['payload'])[dcid])\n  .then( bothDirections => {\n    console.log('url: ' + target + ', values: ' + bothDirections )\n    if (out){\n      return bothDirections['out'];\n    } else{\n      return bothDirections['in'];\n    }\n  });\n}\n\nexport default Node;\n\n//TODO switch subjNodes to list, not set?\n// Todo typeOf:schema:drug is causing too many colons error --> need to fix\n","import Node from './GraphNode.js'\n\nclass Assertion {\n  constructor(src, property, target, provenance) {\n    this.src = src;\n    this.property = property;\n    this.provenance = provenance;\n    this.target = target;\n    this.nextAssertion = src.assertions;\n    src.assertions = this;\n\n    if (target instanceof Object) {\n      this.invNextAssertion = target.invAssertions;\n      target.invAssertions = this;\n    }\n  }\n  static addAssertion(src, property, target, provenance){\n    new Assertion(src, property, target, provenance)\n  }\n\n  static createAssertionFromValueObj(source, label, valueObj){\n    let target;\n    if ('dcid' in valueObj) {\n      target = Node.getNode(valueObj['dcid'], true);\n    } else if ('value' in valueObj) {\n      target = valueObj['value'];\n    } else{\n      console.log(\"ERROR Node has no 'dcid' or 'value' prop: \" +  valueObj);\n    }\n    Assertion.addAssertion(source, label, target,\n      valueObj['provenanceId']);\n    }\n\n    static createInvAssertionFromValueObj(target, label, valueObj){\n      let source;\n      if ('dcid' in valueObj) {\n        source = Node.getNode(valueObj['dcid'], true);\n      } else{\n        console.log(\"ERROR  Node has no 'dcid' for inverse: \" +  valueObj);\n      }\n      Assertion.addAssertion(source, label, target,\n        valueObj['provenanceId']);\n      }\n}\nexport default Assertion;\n","import Assertion from './Assertion.js'\nimport Node from './GraphNode.js'\n\nconst NAMESPACES = ['l', 'schema', 'dcs', 'dcid'];\n\nclass ParseMCF{\n\n  constructor(sourceFileName){\n    this.curNode = null;\n    this.prov = sourceFileName\n  }\n\n  static readFile(file){\n    const fileReader = new FileReader();\n    fileReader.readAsText(file);\n    return new Promise( (res,rej) => {\n      fileReader.addEventListener(\"loadend\", result => {\n\n        res(ParseMCF.parseMCFStr(fileReader.result, file.name));\n      });\n\n      fileReader.addEventListener('error', rej);\n    });\n  }\n\n  static parseMCFStr(mcf, fileName){\n    const lines = mcf.split('\\n');\n    const prov = 'local: ' + fileName;\n    const mcfParser = new ParseMCF(prov);\n    for (const line of lines){\n      mcfParser.parseLine(line);\n    }\n    return Node.subjNodes;\n  }\n\n  static shouldReadLine(line){\n    if (line.startsWith('#') || line.startsWith(\"//\") || line.length === 0){\n      return false;\n    }\n    return true;\n  }\n\n  static getPropLabel(line){\n    let prop;\n    let splitLineOnColon = line.split(':');\n    if (splitLineOnColon.length < 2){\n      console.log('ERROR Line does not contain colon: ' + line);\n      return prop;\n    }\n    prop = splitLineOnColon[0];\n    return prop;\n  }\n\n static getNodeFromPropValue(propValue){\n    const dcid = ParseMCF.getDCIDFromPropValue(propValue);\n    if (dcid) return Node.getNode(dcid, true);\n\n    console.log('ERROR <getNodeFromPropValue> : ' + propValue);\n    return null;\n  }\n\n  static parsePropValues(propValues){\n    if (!propValues) return null;\n\n    let values = [];\n\n    for (const propValue of propValues.split(',')){\n      if(propValue.split(':').length === 2){\n        const namespace = propValue.split(':')[0].trim()\n        if (NAMESPACES.indexOf(namespace) >=0){\n          values.push(ParseMCF.getNodeFromPropValue(propValue));\n        } else{\n          console.log('ERROR <parsePropValues> unregonized namespace: ' + propValues);\n        }\n      } else if (propValue.split(':').length === 1){\n        const value = propValue.split(':')[0].trim();\n        if (value){\n          values.push(value)\n        } else{\n          console.log('WARNING <parsePropValues> empty value: ' + propValues)\n        }\n      } else{\n        console.log('ERROR <parsePropValues> too many colons: ' + propValues);\n      }\n\n    }\n    return values;\n  }\n\n  static getDCIDFromPropValue(propValues){\n    if(propValues.split(':').length === 2){\n      const namespace = propValues.split(':')[0].trim()\n      if (NAMESPACES.indexOf(namespace) >=0){\n        return propValues.split(':')[1].trim();\n      }\n    }\n    console.log('ERROR <getDCID>: ' + propValues);\n    return null;\n  }\n\n  //TODO check for ill formatted lines!!\n   parseLine(line){\n    line = line.trim();\n    if(!ParseMCF.shouldReadLine(line)) return;\n\n      const propLabel = ParseMCF.getPropLabel(line);\n      if (!propLabel) return;\n\n      const propValues = line.replace(propLabel + ':', '').trim();\n\n      if (propLabel === 'Node'){\n        this.curNode = ParseMCF.getNodeFromPropValue(propValues);\n        Node.subjNodes[this.curNode.dcid] = this.curNode;\n        return;\n      }\n      const values = ParseMCF.parsePropValues(propValues);\n      if (!values) return;\n\n      values.forEach(value => Assertion.addAssertion(this.curNode, propLabel, value,\n        this.prov));\n      }\n}\nexport default ParseMCF;\n// TODO do something with ERRORs\n","const csv = require(\"csvtojson\");\n\nclass ParseTMCF{\n  constructor () {\n    this.localID = undefined;\n  }\n  static shouldReadLine(line){\n    if (line.startsWith('#') || line.startsWith(\"//\") || !line){\n      return false;\n    }\n    return true;\n  }\n\n  static getPropLabel(line){\n    const splitLineOnColon = line.split(':');\n    if (splitLineOnColon.length > 1){\n      return splitLineOnColon[0];\n    }\n    console.log('ERROR Line does not contain colon: ' + line);\n    return undefined;\n  }\n\n  static getArrowId(propValue){\n    if (propValue.includes('->')){\n      return propValue.split('->')[1];\n    }\n    return undefined;\n  }\n\n  static getDataSetName(propValue){\n    const dataSetNameMatch = propValue.match(/(?<=E:)(.*)(?=->)/g);\n    if (dataSetNameMatch) return dataSetNameMatch[0];\n    return 'ERROR';\n  }\n\n  static getEntityLocalID(line){\n    let localID;\n    const localIDMatch = line.match('E:(.*)->(.*)')\n    if(localIDMatch){\n      localID = localIDMatch[0]\n    }\n    return localID\n  }\n\n  loadLocalToDCID(tmcfStr){\n    const lines = tmcfStr.split('\\n');\n\n    for (let line of lines){\n      line = line.trim();\n\n      if(ParseTMCF.shouldReadLine(line)){\n\n        const propLabel = ParseTMCF.getPropLabel(line);\n\n        if (!propLabel) return;\n\n        const propValue = line.replace(propLabel + ':', '').trim();\n\n        if (propLabel === 'Node'){\n          if(this.localID && !ParseTMCF.localIDToDCID[this.localID] ){\n            ParseTMCF.localIDToDCID[this.localID] = 'C:local->index'\n          }\n          this.localID = ParseTMCF.getEntityLocalID(propValue);\n        } else if (propLabel === 'dcid'){\n          ParseTMCF.localIDToDCID[this.localID] = 'dcid:' + propValue;\n        }\n      }\n    }\n    // flush localID buffer\n    if(this.localID && !ParseTMCF.localIDToDCID[this.localID] ){\n      ParseTMCF.localIDToDCID[this.localID] = 'C:local->index'\n    }\n    return ParseTMCF.localIDToDCID;\n  }\n\n  static getDCIDFromEntity(line, index){\n    const lID = ParseTMCF.getArrowId(line);\n    const dataSetName = ParseTMCF.getDataSetName(line);\n    return 'dcid:' + dataSetName + '_' + lID  + '_'  + index;\n  }\n\n\n  static fillTemplateFromRow(template, csvRow, index){\n    let filledTemplate = []\n    for (const line of template.split('\\n')){\n\n      if (! line.trim()) {\n        filledTemplate.push('')\n        continue;\n      }\n      const propLabel = ParseTMCF.getPropLabel(line);\n      if (propLabel === 'dcid') continue;\n      const propValues = line.replace(propLabel + ':', '').trim();\n      let parsedValues = [];\n\n      for (const propValue of propValues.split(',')){\n\n        const localID = ParseTMCF.getEntityLocalID(propValue);\n\n        let parsedValue = propValue.replace(localID, ParseTMCF.localIDToDCID[localID])\n\n        const colName = ParseTMCF.getArrowId(parsedValue);\n\n        if(colName === 'index') csvRow['index'] = ParseTMCF.getDCIDFromEntity(localID, index);\n\n        parsedValues.push(parsedValue.replace(/C:(.*)->(.*)/, csvRow[colName]));\n    }\n    if (parsedValues.length) filledTemplate.push(propLabel + ': ' + parsedValues.join(','))\n    }\n    return filledTemplate.join('\\n');\n  }\n\n  static csvToMCF(template, csvRows ){\n    let index = 1;\n    const mcfStrList = []\n    for (const row of csvRows){\n      mcfStrList.push(ParseTMCF.fillTemplateFromRow(template, row, index));\n      index += 1;\n    }\n    return mcfStrList.join('\\n');\n  }\n\n  static readTMCFFile(tmcfFile){\n    const fileReader = new FileReader();\n    fileReader.readAsText(tmcfFile);\n    return new Promise( (res,rej) => {\n      fileReader.addEventListener(\"loadend\", result => {\n        const tmcfParser = new ParseTMCF();\n        tmcfParser.loadLocalToDCID(fileReader.result)\n        res(fileReader.result);\n      });\n      fileReader.addEventListener('error', rej);\n    });\n  }\n\n  static readCSVFile(template, csvFile){\n    const fileReader = new FileReader();\n    fileReader.readAsText(csvFile);\n    return new Promise( (res,rej) => {\n      fileReader.addEventListener(\"loadend\", result => {\n        csv().fromString(fileReader.result).then(csvRows=>{\n          const mcf = ParseTMCF.csvToMCF(template, csvRows);\n          res(mcf);\n        });\n      });\n      fileReader.addEventListener('error', rej);\n    });\n  }\n\n   static async tmcfCSVToMCF(tmcfFile, csvFile){\n     return ParseTMCF.readTMCFFile(tmcfFile)\n      .then(template=>{ return ParseTMCF.readCSVFile(template, csvFile)})\n    }\n}\nParseTMCF.localIDToDCID = {}\n\nexport default ParseTMCF;\n\n// TODO do something with ERRORs\n","import ParseMCF from './ParseMCF.js'\nimport ParseTMCF from './ParseTMCF.js'\nimport Node from './GraphNode.js'\n\nclass ServerAPI{\n\n  static readTMCF(tmcfFile, csvFile){\n    return ParseTMCF.tmcfCSVToMCF(tmcfFile, csvFile).then(mcf => {\n      console.log(mcf);\n      return ParseMCF.parseMCFStr(mcf, tmcfFile.name);\n      });\n  }\n\n  static readMCF(mcfFile){\n    return ParseMCF.readFile(mcfFile)\n  }\n  static clearFiles(){\n    Node.nodeHash = {};\n    Node.subjNodes = {};\n    ParseTMCF.localIDToDCID = {};\n  }\n  static retrieveNode(dcid){\n    return Node.getNode(dcid, true);\n  }\n  static isNodeObj(obj){\n    return Node.isNode(obj);\n  }\n\n}\nexport default ServerAPI;\n","\nimport React, {Component} from 'react';\nimport ServerAPI from './server/ServerAPI.js'\nimport Header from './Header.js'\nimport './App.css'\n\nclass Home extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      localDCIDList: this.props.subjNodes,\n      fileList: null,\n    }\n  }\n\n  onSubmitMCF = () => {\n    const home = this;\n\n    ServerAPI.readMCF(this.state.fileList[0]).then( subjList => {\n      home.props.setSubjNodes(Object.keys(subjList));\n      })\n\n  };\n\n  onSubmitTMCF = () => {\n    let tmcfFile;\n    let csvFile;\n    for (const file of this.state.fileList){\n      if (file.name.endsWith('.tmcf')){\n        tmcfFile = file;\n      } else{\n        csvFile = file;\n      }\n    }\n\n    const home = this;\n    ServerAPI.readTMCF(tmcfFile, csvFile).then( subjList => {\n      home.props.setSubjNodes(Object.keys(subjList));\n    });\n\n  };\n\n  onClearPress = () => {\n    const home = this;\n    home.props.setSubjNodes([]);\n    ServerAPI.clearFiles();\n  }\n  render = () =>{\n    return (\n      <div>\n      <div className=\"App\">\n      <header className=\"App-header\">\n      <Header />\n      <div className=\"div-row\">\n      <div className=\"div-col\">\n      <h3>Upload an MCF file to preview in Data Commons.</h3>\n      <input id=\"file-select\" onChange={ event => this.setState({fileList: event.target.files}) }\n        type=\"file\" name=\"UploadFile\" accept=\".mcf\" required />\n      <br></br>\n      <button id='submitMCFFile' onClick={this.onSubmitMCF} >Submit</button>\n      <br></br>\n      <button id='clearFile' onClick={this.onClearPress} >Clear</button>\n      </div>\n      <div className=\"div-col\">\n        <h3>Upload TMCF + CSV to preview in Data Commons.</h3>\n      <input id=\"file-select\" onChange={ event => this.setState({fileList: event.target.files}) }\n        type=\"file\" name=\"UploadFile\" accept=\".tmcf,.csv\" required multiple/>\n      <br></br>\n      <button id='submitTMCFFile' onClick={this.onSubmitTMCF} >Submit</button>\n      <br></br>\n      <button id='clearFile' onClick={this.onClearPress} >Clear</button>\n      </div>\n      </div>\n      <ul>{this.state.localDCIDList.map( dcid =>\n        <li key={dcid} onClick={() => window.location.hash = '#dcid=' + dcid}>{dcid}</li>\n        )}</ul>\n        </header>\n      </div>\n\n      </div>\n\n    );\n  }\n}\nexport default Home;\n","import React, {Component} from 'react';\nimport './App.css'\nimport ServerAPI from './server/ServerAPI.js';\n\n\nfunction getValueCell(target){\n  if(ServerAPI.isNodeObj(target)){\n    return (<td className='clickable' onClick={() => window.location.hash = '#dcid=' + target.dcid}>{target.dcid}</td>);\n  } else{\n    return (<td>{target}</td>)\n  }\n}\n\nexport class AssertionTable extends Component{\n  render = () => {\n    return (\n      <table>\n      <thead><tr>\n      <th>property</th>\n      <th>target</th>\n      <th>provenance</th>\n      </tr></thead>\n    <tbody>{this.props.asserts.map( (assert,index) => {\n        return (\n          <tr  key={assert.property +  index}>\n          <td>{assert.property}</td>\n          {getValueCell(assert.target)}\n          <td>{assert.provenance}</td>\n          </tr>\n        );\n      })}</tbody>\n      </table>\n    )\n  }\n}\n\nexport class InvAssertionTable extends Component{\n  render = () => {\n    return (\n      <table>\n      <thead><tr>\n      <th>source</th>\n      <th>property</th>\n      <th>provenance</th>\n      </tr></thead>\n    <tbody>{this.props.invAsserts.map( (assert,index) => {\n        return (\n          <tr  key={assert.property +  index}>\n          {getValueCell(assert.src)}\n          <td>{assert.property}</td>\n          <td>{assert.provenance}</td>\n          </tr>\n        );\n      })}</tbody>\n      </table>\n    )\n  }\n}\n","import ServerAPI from './server/ServerAPI.js';\nimport React, {Component} from 'react';\nimport Header from './Header.js'\nimport {AssertionTable, InvAssertionTable} from './AssertionTables.js'\nimport './App.css'\n\n\nclass DisplayNode extends Component{\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      dcid: this.props.dcid,\n      asserts:[],\n      invAsserts: []\n    }\n    console.log('render ' + this.props.dcid)\n  }\n    componentDidMount(){\n\n      let curNode = ServerAPI.retrieveNode(this.state.dcid);\n      curNode.fetchRemoteData(curNode).then( () => {\n        let assert = curNode.assertions;\n        const assertList = [];\n        const invAssertList = [];\n\n        while(assert){\n          assertList.push(assert);\n          assert = assert.nextAssertion;\n        }\n        let invAssert = curNode.invAssertions;\n        while(invAssert){\n          invAssertList.push(invAssert);\n          invAssert = invAssert.invNextAssertion;\n        }\n        this.setState({asserts:assertList, invAsserts:invAssertList});\n    });\n  }\n\n  render = () => {\n    return(\n      <div>\n      <Header />\n      <h1>Display node: {this.state.dcid}</h1>\n      <h3>Assertions</h3>\n      <p><u>source: {this.state.dcid}</u></p>\n      <AssertionTable asserts={this.state.asserts}/>\n      <br></br>\n      <h3>Inverse Assertions</h3>\n      <p><u>target: {this.state.dcid}</u></p>\n      <InvAssertionTable invAsserts={this.state.invAsserts}/>\n\n      </div>\n    );\n  }\n}\nexport default DisplayNode;\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport Header from './Header.js'\nimport Home from './Home.js';\nimport DisplayNode from './DisplayNode.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      subjNodes: [],\n      curDCID:null,\n    }\n  }\n\n  componentDidMount(){\n    const self = this;\n    window.addEventListener('hashchange', () => {\n      console.log('in listener' + window.location.hash)\n      let params = new URLSearchParams(window.location.hash.split(\"#\")[1]);\n      const searchDCID = params.get('dcid');\n      if (searchDCID) {\n        self.setState({curDCID:searchDCID});\n      } else{\n        self.setState({curDCID:null});\n      }\n    }, false);\n\n  }\n  setSubjNodes = nodes =>{\n    this.setState({subjNodes:nodes})\n  }\n\n  render = () => {\n\n    if (!window.location.href.includes('dcid')) return (\n      <Home setSubjNodes={this.setSubjNodes} key={this.state.subjNodes} subjNodes={this.state.subjNodes}/>\n    );\n\n    if (this.state.curDCID) return(\n      <DisplayNode key={this.state.curDCID} dcid={this.state.curDCID} />\n    );\n\n    return (\n      <div>\n      <Header/>\n      <h2>Requested url could not be found</h2>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log('render from index.js')\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}