{"version":3,"sources":["Header.js","Assertion.js","GraphNode.js","ParseMCF.js","Home.js","DisplayNode.js","App.js","serviceWorker.js","index.js"],"names":["Header","handleSearch","event","keyCode","window","location","hash","target","value","type","onKeyUp","this","placeholder","onClick","href","Component","Assertion","src","property","provenance","nextAssertion","assertions","Object","invNextAssertion","invAssertions","source","label","valueObj","Node","getNode","console","log","addAssertion","dcid","API_ROOT","alreadyFetched","curNode","getRemotePropertyLabels","then","allLabels","a","getRemotePropertyValues","valueList","createAssertionFromValueObj","createInvAssertionFromValueObj","createp","existing","nodeHash","newNode","obj","getLabelsRemoteTarget","fetch","res","json","data","JSON","parse","out","getValuesRemoteTarget","bothDirections","subjNodes","ParseMCF","file","fileReader","FileReader","readAsText","Promise","rej","addEventListener","result","lines","split","line","parseLine","startsWith","length","prop","splitLineOnColon","val","node","values","lineSplitOnColon","splitValsByComma","slice","join","forEach","rawVal","trim","includes","readNodeValue","push","replace","lineSplitByColon","prevNode","shouldReadLine","readPropLabel","readDCID","readPropValues","Home","props","onSubmitPress","home","readFile","state","fileList","subjList","setSubjNodes","keys","onClearPress","setState","localDCIDList","localStorage","clear","render","className","id","onChange","files","name","accept","required","map","key","getValueCell","isNode","AssertionTable","asserts","assert","index","InvAssertionTable","invAsserts","DisplayNode","fetchRemoteData","assertList","invAssertList","invAssert","App","nodes","curDCID","self","searchDCID","URLSearchParams","get","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98918ac5.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Header extends Component {\n  handleSearch = event =>{\n    if (event.keyCode === 13){\n      window.location.hash = '#dcid=' + event.target.value;\n    }\n  }\n  render(){\n    return(\n      <div>\n        <input type=\"search\" onKeyUp={this.handleSearch}\n         placeholder=\"Search for a dcid...\" />\n       <button onClick = {() => window.location.href = '' }>Return Home</button>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","import Node from './GraphNode.js'\n\nclass Assertion {\n  constructor(src, property, target, provenance) {\n    this.src = src;\n    this.property = property;\n    this.provenance = provenance;\n    this.target = target;\n    this.nextAssertion = src.assertions;\n    src.assertions = this;\n\n    if (target instanceof Object) {\n      this.invNextAssertion = target.invAssertions;\n      target.invAssertions = this;\n    }\n  }\n  static addAssertion(src, property, target, provenance){\n    new Assertion(src, property, target, provenance)\n  }\n\n  static createAssertionFromValueObj(source, label, valueObj){\n    let target;\n    if ('dcid' in valueObj) {\n      target = Node.getNode(valueObj['dcid'], true);\n    } else if ('value' in valueObj) {\n      target = valueObj['value'];\n    } else{\n      console.log(\"Node has no 'dcid' or 'value' prop: \" +  valueObj);\n    }\n    //console.log('Creating new Assertion');\n    //console.log('src: ' + source.dcid + ', prop: ' + label + ', target: ' +\n    //target.dcid +  ', prov: ' + valueObj['provenanceId']);\n    Assertion.addAssertion(source, label, target,\n      valueObj['provenanceId']);\n    }\n\n    static createInvAssertionFromValueObj(target, label, valueObj){\n      let source;\n      if ('dcid' in valueObj) {\n        source = Node.getNode(valueObj['dcid'], true);\n      } else{\n        console.log(\"Node has no 'dcid' for inverse: \" +  valueObj);\n      }\n      //console.log('Creating new Inv Assertion');\n      console.log('src: ' + source.dcid + ', prop: ' + label + ', target: ' +\n      target.dcid +  ', prov: ' + valueObj['provenanceId']);\n      Assertion.addAssertion(source, label, target,\n        valueObj['provenanceId']);\n      }\n}\nexport default Assertion;\n","import Assertion from './Assertion.js'\n\nconst API_ROOT = 'https://api.datacommons.org';\n\n// JS representation of a single Node in the KG\nclass Node {\n  constructor (dcid) {\n    this.dcid = dcid;\n    this.alreadyFetched = false;\n  }\n\n  static getNode (dcid, createp) {\n    var existing = Node.nodeHash[dcid];\n    if (existing) {\n      return existing;\n    } else if (createp) {\n      var newNode = new Node(dcid);\n      Node.nodeHash[dcid] = newNode;\n      return newNode;\n    } else {\n      return null;\n    }\n  }\n\n  static isNode(obj){\n    return obj instanceof Node;\n  }\n\n  async fetchRemoteData(){\n    const curNode = this;\n    if (!curNode.alreadyFetched){\n\n      await getRemotePropertyLabels(curNode.dcid)\n      .then(async allLabels => {\n        // create Assertions for each triple current node is source\n        for(const label of allLabels['outLabels']) {\n          await getRemotePropertyValues(curNode.dcid, label, true)\n          .then( valueList => {\n            if(!valueList) {\n              console.log('ERROR: could not find value for node: '+ curNode.dcid +\n              ', label: ' + label);\n              return;\n            }\n            for(const valueObj of valueList) {\n              Assertion.createAssertionFromValueObj(curNode, label, valueObj);\n            }\n          });\n        }\n        // create Inverse Assertion for each triple current node is target\n        for (const label of allLabels['inLabels']) {\n          console.log(label)\n          await getRemotePropertyValues(curNode.dcid, label, false)\n          .then( valueList => {\n            for( const valueObj of valueList) {\n            Assertion.createInvAssertionFromValueObj(curNode, label, valueObj);\n          }\n        })\n      }\n    });\n      curNode.alreadyFetched = true;\n    }\n  }\n}\n\nNode.nodeHash = {};\nNode.subjNodes = {};\n\nfunction getLabelsRemoteTarget(dcid){\n  let target = (API_ROOT + '/node/property-labels?dcids=' + dcid)\n  return target;\n}\n\nfunction getValuesRemoteTarget(dcid, property, out){\n  let target = (API_ROOT + '/node/property-values?dcids=' + dcid +\n  '&property=' +   property + '&direction=');\n  if (out){\n    target += 'out'\n  } else{\n    target += 'in'\n  }\n  target += '&limit=500';\n  return target;\n}\n\nfunction getRemotePropertyLabels(dcid){\n  const target = getLabelsRemoteTarget(dcid);\n  return fetch(target)\n  .then( res => res.json())\n  .then( data => JSON.parse(data['payload'])[dcid]);\n}\n\nfunction getRemotePropertyValues(dcid, label, out){\n  const target = getValuesRemoteTarget(dcid, label, out);\n  return fetch(target)\n  .then( res => res.json())\n  .then( data => JSON.parse(data['payload'])[dcid])\n  .then( bothDirections => {\n    console.log('url: ' + target + ', values: ' + bothDirections )\n    if (out){\n      return bothDirections['out'];\n    } else{\n      return bothDirections['in'];\n    }\n  });\n}\n\nexport default Node;\n\n//TODO switch subjNodes to list, not set?\n// Todo typeOf:schema:drug is causing too many colons error --> need to fix\n","import Assertion from './Assertion.js'\nimport Node from './GraphNode.js'\n\nconst LOCAL_PROVENANCE = 'local mcf';\n\n\nclass ParseMCF{\n\n  static readFile(file){\n    const fileReader = new FileReader();\n    fileReader.readAsText(file);\n    return new Promise( (res,rej) => {\n      fileReader.addEventListener(\"loadend\", result => {\n        console.log(result);\n        console.log(fileReader.result);\n        const lines = fileReader.result.split('\\n');\n        let curNode;\n        for (const line of lines){\n          console.log(line);\n          curNode = ParseMCF.parseLine(line, curNode);\n          console.log(curNode);\n        }\n        res(Node.subjNodes);\n      });\n      fileReader.addEventListener('error', rej);\n    });\n  }\n\n  static shouldReadLine(line){\n    if (line.startsWith('#') || line.startsWith(\"//\") || line.length === 0){\n      return false;\n    }\n    return true;\n  }\n\n  static readPropLabel(line){\n    let prop;\n    let splitLineOnColon = line.split(':');\n    if (splitLineOnColon.length < 2){\n      console.log('Line does not contain colon: ' + line);\n      // TODO change to MCF Syntax Error\n      return prop;\n    }\n    prop = splitLineOnColon[0];\n    return prop;\n  }\n\n static readNodeValue(val){\n    let node;\n    if(val.split(':').length === 2 && val.split(':')[0] === 'dcid'){\n      const dcid = val.split(':')[1];\n      node = Node.getNode(dcid, true); //TODO might cause duplicate triples here by pushing to list\n      return node;\n    } else{\n      console.log('Incorrect number of colons in node declaration: ' + val);\n      // TODO change to MCF Syntax Error\n      return node;\n    }\n  }\n\n  static readPropValues(line){\n    let values;\n    let lineSplitOnColon = line.split(':');\n    if (lineSplitOnColon.length < 2 || lineSplitOnColon[1] === ''){\n      console.log('Line does not contain value: ' + line);\n      // TODO change to MCF Syntax Error\n      return values;\n    }\n    const splitValsByComma = lineSplitOnColon.slice(1).join(':').split(',');\n    values = [];\n    splitValsByComma.forEach( rawVal => {\n      let val = rawVal.trim();\n      if(val.includes(':')){\n        val = ParseMCF.readNodeValue(val);\n        if (val) values.push(val);\n      } else{\n        values.push(val.replace(/\"/g, ''));\n      }\n    });\n    return values\n  }\n\n  static readDCID(line){\n    let dcid;\n    const lineSplitByColon = line.split(':');\n    if (lineSplitByColon.length !== 3){\n      console.log('Node declaration, incorrect num of colons: ' + line);\n      return dcid;\n    }\n    return lineSplitByColon[lineSplitByColon.length -1].trim();\n  }\n\n  //TODO check for ill formatted lines!!\n  static parseLine(line, prevNode){\n    let curNode;\n    if( prevNode) curNode = prevNode;\n    line = line.trim();\n    if(ParseMCF.shouldReadLine(line)){\n      let prop = ParseMCF.readPropLabel(line);\n      if (!prop) return curNode;\n      if (prop === 'Node'){\n        let dcid = ParseMCF.readDCID(line);\n        if (!dcid) return curNode;\n        curNode = Node.getNode(dcid, true);\n        if (! (dcid in Node.subjNodes)){\n          Node.subjNodes[dcid] = curNode;\n        }\n        return curNode;\n      }\n      let values = ParseMCF.readPropValues(line);\n      if (!values) return curNode;\n\n      values.forEach(value => Assertion.addAssertion(curNode, prop, value,\n        LOCAL_PROVENANCE));\n      }\n      return curNode;\n    }\n}\nexport default ParseMCF;\n","\nimport React, {Component} from 'react';\nimport Node from './GraphNode.js';\nimport ParseMCF from './ParseMCF.js'\nimport Header from './Header.js'\n\nclass Home extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      localDCIDList: this.props.subjNodes,\n      fileList: null,\n    }\n  }\n\n  onSubmitPress = () => {\n    const home = this;\n\n    ParseMCF.readFile(this.state.fileList[0]).then( subjList => {\n      home.props.setSubjNodes(Object.keys(subjList));\n      })\n\n  };\n\n  onClearPress = () => {\n    const home = this;\n    home.setState({localDCIDList:[]});\n    localStorage.clear();\n  }\n  render = () =>{\n    return (\n      <div>\n      <div className=\"App\">\n      <header className=\"App-header\">\n      <Header />\n      <h3>Upload an MCF file to preview it in Data Commons.</h3>\n      <div>\n      <input id=\"file-select\" onChange={ event => this.state.fileList = event.target.files }\n        type=\"file\" name=\"UploadFile\" accept=\".mcf\" required />\n      <br></br>\n      <button id='submitFile' onClick={this.onSubmitPress} >Submit</button>\n      <br></br>\n      <button id='clearFile' onClick={this.onClearPress} >Clear</button>\n      </div>\n      </header>\n      </div>\n      <ul>{this.state.localDCIDList.map( dcid =>\n        <li key={dcid} onClick={() => window.location.hash = '#dcid=' + dcid}>{dcid}</li>\n        )}</ul>\n      </div>\n    );\n  }\n}\nexport default Home;\n","import Node from './GraphNode.js';\nimport React, {Component} from 'react';\nimport Header from './Header.js'\n \nfunction getValueCell(target){\n  if(Node.isNode(target)){\n    return (<td onClick={() => window.location.hash = '#dcid=' + target.dcid}>{target.dcid}</td>);\n  } else{\n    return (<td>{target}</td>)\n  }\n}\n\nclass AssertionTable extends Component{\n  render = () => {\n    return (\n      <table>\n      <thead><tr>\n      <th>property</th>\n      <th>target</th>\n      <th>provenance</th>\n      </tr></thead>\n    <tbody>{this.props.asserts.map( (assert,index) => {\n        return (\n          <tr  key={assert.property +  index}>\n          <td>{assert.property}</td>\n          {getValueCell(assert.target)}\n          <td>{assert.provenance}</td>\n          </tr>\n        );\n      })}</tbody>\n      </table>\n    )\n  }\n}\n\nclass InvAssertionTable extends Component{\n  render = () => {\n    return (\n      <table>\n      <thead><tr>\n      <th>source</th>\n      <th>property</th>\n      <th>provenance</th>\n      </tr></thead>\n    <tbody>{this.props.invAsserts.map( (assert,index) => {\n        return (\n          <tr  key={assert.property +  index}>\n          {getValueCell(assert.src)}\n          <td>{assert.property}</td>\n          <td>{assert.provenance}</td>\n          </tr>\n        );\n      })}</tbody>\n      </table>\n    )\n  }\n}\n\nclass DisplayNode extends Component{\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      dcid: this.props.dcid,\n      asserts:[],\n      invAsserts: []\n    }\n    console.log('render ' + this.props.dcid)\n  }\n    componentDidMount(){\n\n      let curNode = Node.getNode(this.state.dcid, true);\n      curNode.fetchRemoteData(curNode).then( () => {\n        let assert = curNode.assertions;\n        const assertList = [];\n        const invAssertList = [];\n\n        while(assert){\n          assertList.push(assert);\n          assert = assert.nextAssertion;\n        }\n        let invAssert = curNode.invAssertions;\n        console.log(curNode);\n        while(invAssert){\n          invAssertList.push(invAssert);\n          invAssert = invAssert.invNextAssertion;\n          console.log(invAssertList);\n        }\n        this.setState({asserts:assertList, invAsserts:invAssertList});\n    });\n  }\n\n  render = () => {\n    return(\n      <div>\n      <Header />\n      <h1>Display node: {this.state.dcid}</h1>\n      <h3>Assertions</h3>\n      <p><u>source: {this.state.dcid}</u></p>\n      <AssertionTable asserts={this.state.asserts}/>\n      <br></br>\n      <h3>Inverse Assertions</h3>\n      <p><u>target: {this.state.dcid}</u></p>\n      <InvAssertionTable invAsserts={this.state.invAsserts}/>\n\n      </div>\n    );\n  }\n}\nexport default DisplayNode;\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport Header from './Header.js'\nimport Home from './Home.js';\nimport DisplayNode from './DisplayNode.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      subjNodes: [],\n      curDCID:null,\n    }\n  }\n\n  componentDidMount(){\n    const self = this;\n    window.addEventListener('hashchange', () => {\n      console.log('in listener' + window.location.hash)\n      let params = new URLSearchParams(window.location.hash.split(\"#\")[1]);\n      const searchDCID = params.get('dcid');\n      if (searchDCID) {\n        self.setState({curDCID:searchDCID});\n      } else{\n        self.setState({curDCID:null});\n      }\n    }, false);\n\n  }\n  setSubjNodes = nodes =>{\n    this.setState({subjNodes:nodes})\n  }\n\n  render = () => {\n\n    if (!window.location.href.includes('#')) return (\n      <Home setSubjNodes={this.setSubjNodes} key={this.state.subjNodes} subjNodes={this.state.subjNodes}/>\n    );\n\n    if (this.state.curDCID) return(\n      <DisplayNode key={this.state.curDCID} dcid={this.state.curDCID} />\n    );\n\n    return (\n      <div>\n      <Header/>\n      <h2>Requested url could not be found</h2>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log('render from index.js')\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}